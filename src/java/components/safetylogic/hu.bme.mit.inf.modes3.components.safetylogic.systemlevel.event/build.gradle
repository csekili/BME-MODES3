apply plugin: 'java'
apply plugin: 'org.xtext.xtend'
apply plugin: 'application'

mainClassName = "hu.bme.mit.inf.safetylogic.event.app.Main"
run {
	args = ['--config', 'production',
		'--address', '127.0.0.1',
		'--id', 'SafetyLogic',
		'--pubPort', '9999',
		'--repPort', '9998']
}

// In this section you declare the dependencies for your production and test code
dependencies {
	compile 'org.eclipse.emf:org.eclipse.emf.common:2.11.0-v20150805-0538'
	compile 'org.eclipse.emf:org.eclipse.emf.ecore:2.11.1-v20150805-0538'
	compile 'org.eclipse.viatra:viatra-query-runtime:1.4.0'
	
	compile project(':messaging:hu.bme.mit.inf.modes3.messaging.communication')
	compile project(':components:safetylogic:hu.bme.mit.inf.modes3.components.safetylogic.systemlevel.model')
	compile project(':components:safetylogic:hu.bme.mit.inf.modes3.components.safetylogic.systemlevel.patterns')
}

/*

distZip {
    into(project.name) {
        from '.'
        include 'instance.railroadmodel'
    }
}

remotes {
	safetylogic {
		role('turnout')
		host = 'safetylogic.modes3.intra'
		user = 'pi'
		identity = file('modes3_key')
	}
}

task deploy(dependsOn: 'distTar') << {
	ssh.run {
		session(remotes.role('turnout')) {
			put from: 'components/safetylogic/hu.bme.mit.inf.modes3.components.safetylogic/build/distributions/hu.bme.mit.inf.modes3.components.bbb.tar', into: '/modes3'
			execute 'cd /modes3 && tar -xf hu.bme.mit.inf.modes3.components.safetylogic.systemlevel.tar'
		}
	}
}
*/